extends index.pug

block style
  style
    include assets/css/common.css
    include assets/css/patterns.css

block content
  header
    .header_container.container
      nav(aria-label='Main')
        h1.title
          a(title='Fancy Font Text Generator' href='https://fancy-text-generator.com/') 𝔉𝔞𝔫𝔠𝔶 𝔉𝔬𝔫𝔱 𝔗𝔢𝔵𝔱 𝔊𝔢𝔫𝔢𝔯𝔞𝔱𝔬𝔯
        span.myLogo
          a.myLogo(title='Fancy Font Text Generator' href='https://fancy-text-generator.com/')
            img(src='https://fancy-text-generator.com/favicon-76.png' alt=' Fancy Font Text Logo' width='35px' height='35px')
        .icons_wrapper
          a.darkMode(role='button' title='Use light theme' aria-label='Toggle DarkMode')
          button.navbar-toggler.collapsed(type='button' aria-controls='bdNavbar' aria-expanded='false' aria-label='Toggle navigation')
            svg.bi(xmlns='http://www.w3.org/2000/svg' width='32' height='32' fill='#fff' viewBox='0 0 16 16')
              path(fill-rule='evenodd' d='M2.5 11.5A.5.5 0 0 1 3 11h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5zm0-4A.5.5 0 0 1 3 7h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5zm0-4A.5.5 0 0 1 3 3h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5z')
        #bdNavbar
          ul
            li
              a.darkMode(role='button' title='Use light theme' aria-label='Toggle DarkMode')
            li
              a.underline(href='home.html') Home
            li
              a.underline(href='patterns.html' aria-current='page') Patterns
            li
              a.underline(href='iosEmojis.html') Ios Emojis
            li
              a.underline(href='') Android Emojis
            li
              a.underline(href='unicode.html') Unicode
  .text-area
    .input-container
      .input-wrapper
        i.pen-icon(aria-label='Icon of Pencil')
        input#mytext(placeholder='Your fancy text here')
        button.btn-copy
          | Copy All
      button.bd-sidebar-toggler.collapsed(type='button' aria-controls='bd-docs-nav' aria-expanded='true' aria-label='Toggle docs navigation')
        svg.bi.bi-expand(xmlns='http://www.w3.org/2000/svg' width='24' height='24' fill='currentColor' viewBox='0 0 16 16')
          title Expand
          path(fill-rule='evenodd' d='M1 8a.5.5 0 0 1 .5-.5h13a.5.5 0 0 1 0 1h-13A.5.5 0 0 1 1 8zM7.646.146a.5.5 0 0 1 .708 0l2 2a.5.5 0 0 1-.708.708L8.5 1.707V5.5a.5.5 0 0 1-1 0V1.707L6.354 2.854a.5.5 0 1 1-.708-.708l2-2zM8 10a.5.5 0 0 1 .5.5v3.793l1.146-1.147a.5.5 0 0 1 .708.708l-2 2a.5.5 0 0 1-.708 0l-2-2a.5.5 0 0 1 .708-.708L7.5 14.293V10.5A.5.5 0 0 1 8 10z')
        svg.bi.bi-collapse(xmlns='http://www.w3.org/2000/svg' width='24' height='24' fill='currentColor' viewBox='0 0 16 16')
          title Collapse
          path(fill-rule='evenodd' d='M1 8a.5.5 0 0 1 .5-.5h13a.5.5 0 0 1 0 1h-13A.5.5 0 0 1 1 8zm7-8a.5.5 0 0 1 .5.5v3.793l1.146-1.147a.5.5 0 0 1 .708.708l-2 2a.5.5 0 0 1-.708 0l-2-2a.5.5 0 1 1 .708-.708L7.5 4.293V.5A.5.5 0 0 1 8 0zm-.5 11.707l-1.146 1.147a.5.5 0 0 1-.708-.708l2-2a.5.5 0 0 1 .708 0l2 2a.5.5 0 0 1-.708.708L8.5 11.707V15.5a.5.5 0 0 1-1 0v-3.793z')
  .container-xxl.bd-layout
    aside.bd-sidebar
      nav#bd-patterns-nav(aria-label='Patterns navigation')
        ul.bg-links
          li
            a.category.icon.date.active(href='#dates-content')
              | Dates
          li
            a.category.icon.process(href='#process-content') 
              | Process
          li
            a.category.icon.arrow(href='#holidays-content') 
              | Holidays
            .collapse
              ul
                li
                  a.collapse-link.active(href='#holidays-newyear')
                    | New Year
                li
                  a.collapse-link(href='#holidays-valentine')
                    | Valentine's Day
                li
                  a.collapse-link(href='#holidays-chinesenewyear')
                    | Chinese New Year
                li
                  a.collapse-link(href='#holidays-thanksgiving')
                    | Thanksgiving
                li
                  a.collapse-link(href='#holidays-halloween')
                    | Halloween
                li
                  a.collapse-link(href='#holidays-christmas')
                    | Christmas
          li
            a.category.icon.quotes(href='#quotes-content') 
                | Quotes
    main.bd-main.order-1
      #dates-content.bd-content
        div
          h3 DATES
          #date-input
            label(for='datePicker') Get custom date
            input#datePicker(type='date' value='' data-gramm_editor='false')
        .content-wrapper.copy-area
      #process-content.bd-content
        h3 PROCESS
        .content-wrapper.copy-area
      #holidays-content.bd-content
        h3 HOLIDAYS
        #holidays-newyear.sub-content
          h4.sub-title
            span 🎊 
            | New Year
          .content-wrapper.copy-area
        #holidays-valentine.sub-content
          h4.sub-title
            span 💝 
            | Valentine's Day
          .content-wrapper.copy-area
        #holidays-chinesenewyear.sub-content
          h4.sub-title
            span 🧧 
            | Chinese New Year
          .content-wrapper.copy-area
        #holidays-thanksgiving.sub-content
          h4.sub-title
            span 👪 
            | Thanksgiving
          .content-wrapper.copy-area
        #holidays-halloween.sub-content
          h4.sub-title
            span 🎃 
            | Halloween
          .content-wrapper.copy-area
        #holidays-christmas.sub-content
          h4.sub-title
            span 🎄 
            | Christmas
          .content-wrapper.copy-area
      #quotes-content.bd-content
        h3 QUOTES
        .content-wrapper.copy-area

block scripts 
  script(src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js")
  script.
    class MacroCommand {
      constructor() {
        this.commandList = [];
      }
      add(command) {
        this.commandList.push(command);
      }
      exceute() {
        for (const command of this.commandList) {
          command.execute();
        }
      }
    }

    const triggerEventsCommand = {
      execute() {
        this.copyTextCommand();
        this.toggleNavBarCommand();
        this.toggleSideBarCommand();
        this.sidebarOnScrollCommand()
        this.updateSideBarCommand();
      },
      copyTextCommand() {
        $(".copy-area").each(function () {
          $(this).on("click", "p", function () {
            copyText($(this).text())
            changeInputVal($(this).text())
            updateCopyTag($(this));

            function updateCopyTag(el) {
              var span = el.parent().find("span");
              span.text("Copied!");
              span.css("opacity", "1");
              setTimeout(() => {
                span.text("Click To Copy");
              }, 1000);
              setTimeout(() => {
                span.css("opacity", "0");
              }, 2000);
            }
          })
        })
        $(".btn-copy").on('click', function () {
          copyText($("#mytext").val())
          updateCopyTag($(this))
          function updateCopyTag(el) {
            el.text("Copied!")
            setTimeout(() => {
              el.text("Copy All")
            }, 1000)
          }
        })
        function changeInputVal(val) {
          var originalval = $("#mytext").val();
          $("#mytext").val(originalval + val);
        }
        function copyText(t) {
          const e = document.createElement("textarea");
          (e.value = t),
            document.body.appendChild(e),
            e.select(),
            document.execCommand("copy"),
            document.body.removeChild(e);
        }
      },
      toggleNavBarCommand() {
        $('.navbar-toggler').click(function () {
          $(this).toggleClass('collapsed')
          if (!$(this).hasClass('collapsed')) {
            // Check if the Sidebar is open
            if ($('.bd-sidebar').hasClass('show')) {
              $('.bd-sidebar').removeClass('show')
            }
            // Toggle navigation
            $('#bdNavbar').addClass('show');
          }
          else {
            $('#bdNavbar').removeClass('show');
          }
        })
      },
      toggleSideBarCommand() {
        $('.bd-sidebar-toggler').click(function () {
          if ($(this).hasClass('collapsed')) {
            $(this).removeClass('collapsed');
            $('.bd-sidebar').addClass('show');
          } else {
            $(this).addClass('collapsed');
            $('.bd-sidebar').removeClass('show');
          }
        })
      },
      sidebarOnScrollCommand() {
        $(window).scroll(function () {
          var scrollTop = $(this).scrollTop();
          wacth($(".bd-content"), $("#bd-patterns-nav .category"));
          wacth($(".sub-content"), $(".collapse-link"));
          // Watch position
          function wacth(element, target) {
            element.each(function () {
              if ($(this).offset().top <= scrollTop + 100) {
                var id = $(this)[0].id;
                target.each(function () {
                  if ($(this).attr("href") === "#" + id) {
                    if (!$(this).hasClass("active")) {
                      target.removeClass("active");
                      $(this).addClass("active");
                    }
                  }
                });
              }
            });
          }
        });
      },
      updateSideBarCommand() {
        $("#bd-patterns-nav .category").on("click", function () {
          var targetid = $(this).attr("href").slice(1);

          //Change the sidebar tags
          clearCls($("#bd-patterns-nav .category"), "active");
          $(this).toggleClass("active");

          // Toggle sidebar
          if ($(".bd-sidebar").hasClass("show")) {
            $(".bd-sidebar").removeClass("show");
            $(".bd-sidebar-toggler").addClass("collapsed");
          }
          // Change the tab
          clearCls($(".bd-content"), "active");
          $(`#${targetid}`).addClass("active");
        });

        $(".collapse-link").on("click", function () {
          clearCls($(".collapse-link"), "active");
          $(this).toggleClass("active");
          // Toggle sidebar
          if ($(".bd-sidebar").hasClass("show")) {
            $(".bd-sidebar").removeClass("show");
            $(".bd-sidebar-toggler").addClass("collapsed");
          }
        });
        function clearCls(el, cls) {
          el.each(function () {
            if ($(this).hasClass(cls)) {
              $(this).removeClass(cls);
            }
          });
        }
      },
    }

    const setTextsCommand = {
      execute() {
        this.getJsonTexts();
        this.setProcessTxts()
        this.setDateTxts()
      },
      getJsonTexts() {
        var setTexts = this.setTexts;
        $.getJSON('../patterns.json', function (data) {
          $.each(data, function (infoIndex, info) {
            if (info["category"] === 'holiday') {
              jsonToTxts.setHolidays(info["list"]);

            }
            if (info["category"] === 'quotes') {
              jsonToTxts.setQuotes(info['list'])
            }
          })
        })
        const jsonToTxts = {
          setHolidays(j) {
            for (var i = 0; i < Object.keys(j).length; i++) {
              var key = Object.keys(j)[i],
                list = j[key];
              setTexts(list, `#holidays-${key} .copy-area`);
            }
          },
          setQuotes(list) {
            setTexts(list, "#quotes-content .copy-area");
          }

        }
      },
      setProcessTxts() {
        this.setTexts(getProcessTxts(), "#process-content .copy-area");

        function getProcessTxts() {
          var processList = [],
            day = new Date();

          processList.push(todayProcess(day));
          processList.push(weekProcess(day));
          processList.push(monthProcess(day));
          processList.push(yearProcess(day));

          function todayProcess(day) {
            var hours = day.getHours(),
              minuts = day.getMinutes() / 60,
              processToday = (hours + minuts) / 24;

            return ("𝐓𝐨𝐝𝐚𝐲 " + getDatas(processToday) + "%");
          }
          function weekProcess(day) {
            var d = day.getDay(),
              processWeek = d / 7;
            return ("𝐓𝐡𝐢𝐬 𝐖𝐞𝐞𝐤 " + getDatas(processWeek) + "%");
          }
          function monthProcess(day) {
            var dayCount =
              32 - new Date(day.getYear(), day.getMonth(), 32).getDate() + 1,
              datetoday = day.getDate(),
              processMonth = datetoday / dayCount;
            return ("𝐓𝐡𝐢𝐬 𝐌𝐨𝐧𝐭𝐡 " + getDatas(processMonth) + "%");
          }
          function yearProcess(day) {
            var month = day.getMonth(),
              processYear = month / 12;
            return ("𝐓𝐡𝐢𝐬 𝐘𝐞𝐚𝐫 " + getDatas(processYear) + "%");
          }

          function getDatas(a) {
            var list = ["▓▓", "░░"],
              n = "𝟎𝟏𝟐𝟑𝟒𝟓𝟔𝟕𝟖𝟗",
              percent = (a * 100).toFixed(1),
              number = Math.round(a * 10);
            return (
              repeat(list[0], number) + repeat(list[1], 10 - number) + " " + percent
            );
          }
          function repeat(str, n) {
            return new Array(n + 1).join(str);
          }

          return processList;
        }
      },
      setDateTxts() {
        var setTexts = this.setTexts;

        setDefaultDateTxts();
        //  Set the date texts when the user changes the date
        $("#datePicker").on("change", setDateTexts);

        function setDefaultDateTxts() {
          Date.prototype.toDateInputValue = function () {
            var local = new Date(this);
            local.setMinutes(this.getMinutes() - this.getTimezoneOffset());
            return local.toJSON().slice(0, 10);
          };

          $("#datePicker").val(new Date().toDateInputValue());
          setDateTexts();
        }

        // Set Date Texts
        function setDateTexts() {

          var textsList = [];
          var date = $("#datePicker").val();
          [year, month, date] = date.split("-");
          
          var numberToMonth = {
            "01": "Jan",
            "02": "Feb",
            "03": "Mar",
            "04": "Apr",
            "05": "May",
            "06": "Jun",
            "07": "jul",
            "08": "Aug",
            "09": "Sep",
            10: "Oct",
            11: "Nov",
            12: "Dec",
          };
          var getTexts = {
            getPattern1() {
              var font = [
                "𝓪𝓫𝓬𝓭𝓮𝓯𝓰𝓱𝓲𝓳𝓴𝓵𝓶𝓷𝓸𝓹𝓺𝓻𝓼𝓽𝓾𝓿𝔀𝔁𝔂𝔃𝓐𝓑𝓒𝓓𝓔𝓕𝓖𝓗𝓘𝓙𝓚𝓛𝓜𝓝𝓞𝓟𝓠𝓡𝓢𝓣𝓤𝓥𝓦𝓧𝓨𝓩",
                "𝒶𝒷𝒸𝒹𝑒𝒻𝑔𝒽𝒾𝒿𝓀𝓁𝓂𝓃𝑜𝓅𝓆𝓇𝓈𝓉𝓊𝓋𝓌𝓍𝓎𝓏𝒜𝐵𝒞𝒟𝐸𝐹𝒢𝐻𝐼𝒥𝒦𝐿𝑀𝒩𝒪𝒫𝒬𝑅𝒮𝒯𝒰𝒱𝒲𝒳𝒴𝒵",
              ];
              function func(v) {
                return "/" + v + "./";
              };
              function getTexts(font, month, func) {
                var z = [];
                function u(t, e) {
                  if (!t) return "";
                  var test = Number(t);
                  if (isNaN(test)) {
                    var a = Array.from("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ");
                  } else {
                    var a = Array.from("0123456789");
                  }
                  for (var n = Array.from(e), r = t, i = 0; i < a.length; i++) {
                    var o = a[i],
                      s = n[i];
                    r = r.split(o).join(s);
                  }
                  return r;
                }
                for (var r = 0; r < font.length; r++) {
                  var i = font[r],
                    x = u(month, i),
                    v = func.call(this, x);
                  z.push(v);
                }
                return z;
              }
              return getTexts(font, numberToMonth[month], func)
            },
            getPattern2() {
              var font1 = [
                "🅰🅱🅲🅳🅴🅵🅶🅷🅸🅹🅺🅻🅼🅽🅾🅿🆀🆁🆂🆃🆄🆅🆆🆇🆈🆉🅰🅱🅲🅳🅴🅵🅶🅷🅸🅹🅺🅻🅼🅽🅾🅿🆀🆁🆂🆃🆄🆅🆆🆇🆈🆉",
                "🄰🄱🄲🄳🄴🄵🄶🄷🄸🄹🄺🄻🄼🄽🄾🄿🅀🅁🅂🅃🅄🅅🅆🅇🅈🅉🄰🄱🄲🄳🄴🄵🄶🄷🄸🄹🄺🄻🄼🄽🄾🄿🅀🅁🅂🅃🅄🅅🅆🅇🅈🅉",
              ];
              var font2 = ["⓿➊➋➌➍➎➏➐➑➒", "⓪①②③④⑤⑥⑦⑧⑨"];

              function getTexts2(font1, month, date, font2) {
                var z = [];
                function u(t, e) {
                  if (!t) return "";
                  var test = Number(t);
                  if (isNaN(test)) {
                    var a = Array.from("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ");
                  } else {
                    var a = Array.from("0123456789");
                  }
                  for (var n = Array.from(e), r = t, i = 0; i < a.length; i++) {
                    var o = a[i],
                      s = n[i];
                    r = r.split(o).join(s);
                  }
                  return r;
                }
                for (var r = 0; r < font1.length; r++) {
                  var i = font1[r],
                    x = u(month, i) + u(date, font2[r]);
                  z.push(x);
                }
                return z;
              }
              return getTexts2(font1, numberToMonth[month], date, font2)
            },
          }

          $("#dates-content .copy-area").empty();
          textsList.push(...getTexts.getPattern1());
          textsList.push(...getTexts.getPattern2());
          setTexts(textsList, "#dates-content .copy-area");




        }
      },
      setTexts(v, element) {
        for (var i = 0; i < v.length; i++) {
          var l = $(`<p>${v[i]}</;>`),
            el = $('<div class="item-50 flex-item copy-wrapper"><span class="copy">Click To Copy!</span></div>').append(l);
          $(element).append(el)
        }
      }
    }


    const toggleDarkModeCommand = {
      execute() {
        $('.darkMode').click(function () {
          $(this).toggleClass('active');
          $(this).attr('title', "Use dark mode");
          var cl = $("body").toggleClass("dark");
          if ($("body").hasClass('dark')) {
            // Whenever the user explicitly chooses dark mode
            localStorage.theme = 'dark';
          } else {
            //     // Whenever the user explicitly chooses light mode
            localStorage.theme = 'light';
          }
        })

        this.changeStorageData();
      },
      changeStorageData() {
        if (
          localStorage.theme === 'dark'
          || (!('theme' in localStorage)
            && window.matchMedia('(prefers-color-scheme: dark)').matches)
        ) {
          $("body").addClass('dark');
          $('.darkMode').addClass('active');
        } else {
          $("body").removeClass('dark');
        }
      }
    }

    const macroCommand = new MacroCommand();
    macroCommand.add(toggleDarkModeCommand);
    macroCommand.add(triggerEventsCommand);
    macroCommand.add(setTextsCommand);
    macroCommand.exceute();